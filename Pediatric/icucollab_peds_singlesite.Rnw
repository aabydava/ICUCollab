%% -- Specially formatted Latex comment tells RStudio to compile PDF with knitr
% !Rnw weave = knitr

\documentclass{article}

\usepackage{setspace, relsize}
\usepackage{longtable}
\usepackage[margin = 0.3in]{geometry}
\usepackage{hyperref}
\usepackage{float}
\usepackage{pdflscape}

\title{ICU Collaborative: Pediatric ABCDEF Bundle Performance, \Sexpr{site}}
\author{Society of Critical Care Medicine}
\date{\today}

\begin{document}
\maketitle

The following tables and figures present descriptions of compliance with the ABCDEF bundle at \Sexpr{site} during a baseline period (up to 3 months) and an implementation period (up to 8 months). Code for all data management and analysis can be found \href{https://github.com/jenniferthompson/ICUCollab/blob/master/Pediatric/datamgmt.R}{here} and \href{https://github.com/jenniferthompson/ICUCollab/blob/master/Pediatric/icucollab_peds_reportsbysite.R}{here}/\href{https://github.com/jenniferthompson/ICUCollab/blob/master/Pediatric/icucollab_peds_singlesite.Rnw}{here}, respectively.

<<setup, message=FALSE, echo=FALSE, warning=FALSE>>=
opts_chunk$set(echo=FALSE, results='hide', warning=FALSE, message=FALSE, cache=FALSE, error=FALSE)
options(replace.assign = TRUE, width = 90)

## How many patients had no month entered and can't be considered?
nomonth.ids <- subset(demog.site, is.na(month.cat))$id

if(length(nomonth.ids) > 0){
  nomonth.sentence <- paste('(In addition,', length(nomonth.ids), 'patients had no ``month" entered in the database and therefore cannot be counted when comparing the two cohorts.)')
} else{
  nomonth.sentence <- ''
}

## Example to describe median/IQR
quantile.example <- quantile(subset(demog.site, data.time == 'Baseline')$piculos,
                             probs = c(0.25, 0.5, 0.75), na.rm = TRUE)

@

\section{Entire Cohort}
\subsection{Demographic, Baseline, and Hospital Stay Characteristics}
Table \ref{table:descstats} describes the patients at \Sexpr{site} whose data was collected during the baseline and implementation data collection periods. There are \Sexpr{format(length(unique(demog.site$id)), big.mark = ',')} unique patient IDs currently recorded. \Sexpr{nomonth.sentence}

For continuous variables (like days of invasive ventilation), the 25th, 50th, and 75th percentiles are shown, in that order. The 50th percentile (median) is the ``middle" value in the cohort, or the closest value to a ``typical" patient: half the patients have a value below that number, and half the patients have a value above it.

For example, for PICU length of stay in the baseline cohort (see Table \ref{table:descstats}), 25\% of patients had \Sexpr{quantile.example['25%']} or fewer days in the ICU; half the patients had \Sexpr{quantile.example['50%']} or fewer days in the ICU; and 75\% of patients had \Sexpr{quantile.example['75%']} or fewer days in the ICU.

Categorical variables (eg, age category) are visualized by barcharts showing the percentage of patients in each category during each data collection period. Continuous variables (eg, FSS) are visualized by boxplots, which show the median (middle line), 25th percentile (bottom of the box), and 75th percentile (top of the box). Points shown are the most extreme values (outliers).

\subsection{Explanation of Boxplots}
\href{https://en.wikipedia.org/wiki/Box_plot}{Boxplots (also known as ``box and whisker plots")} are a standard way to describe continuous quantities - for example, PRISM 2 score. The bottom of each box indicates the 25th percentile for that group - for example, 25\% of the patients in this group had a PRISM 2 score of that value or lower. The line in the middle of each box indicates the median, or 50th percentile for that group: half the patients in that group have a value lower than the median; half the patients have a value higher. This is our best description of a ``typical" patient. The top of each box indicates the 75th percentile for that group: 75\% of the patients have a value lower than that level, and 25\% of the patients have a value higher. \textbf{The values within the box represent the middle, most ``typical" half of each group.}

The ``whiskers" - the lines on either side of each box - show how far beyond that middle 50\% the majority of the patients' values fall. The dots, if there are any, represent outliers - patients whose values are very different from the vast majority of the group.

<<desccohort>>=
## At least one site doesn't have any POPC data entered; account for this case
if(sum(!is.na(demog.site$popc.preadm)) == 0){
  desc_formula <- gsub(" + popc.preadm", "", base_desc_formula, fixed = TRUE)
} else{
  desc_formula <- base_desc_formula
}

## Also account for whether site collected PRISM3 and/or PIM2
if(sum(!is.na(demog.site$prism3)) == 0){
  desc_formula <- gsub(" + prism3", "", desc_formula, fixed = TRUE)
}

if(sum(!is.na(demog.site$pim2)) == 0){
  desc_formula <- gsub(" + pim2", "", desc_formula, fixed = TRUE)
}

## Create descriptives table
desc.all <- summaryM(as.formula(desc_formula), data = demog.site, continuous = 5)

## Create table of admission diagnoses
desc.dx <- summaryM(dx.surgery + dx.resp + resp.rds + resp.airway +
                      resp.asthma + resp.cld + resp.pneu + dx.gi + dx.neuro +
                      dx.tbi + dx.burn + dx.other ~ data.time,
                    data = demog.site)

@

<<printdesccohort, results = 'asis'>>=
my.print.summaryM(desc.all,
                  caption = 'Description of Entire Cohort',
                  caption.lot = 'Description of Entire Cohort',
                  exclude1 = FALSE,
                  size = 'small',
                  label = 'table:descstats')

my.print.summaryM(desc.dx,
                  caption = 'Admission Diagnoses',
                  caption.lot = 'Admission Diagnoses',
                  exclude1 = TRUE,
                  size = 'small',
                  label = 'table:admitdx',
                  insert.bottom = "Note: FALSE indicates that no patients at this site had this diagnosis recorded.")

@

<<vis_desccohort_prep>>=
## -- Generate plots of all baseline, demographic, outcome variables -----------
plot_vars <- c("age.f", "sex.f", "race.combined", "severity.combined",
               "prism3", "pim2", "diagnosis.f", "ever.vent", "ventdays",
               "piculos", "hosplos", "fss", "popc", "mortality.f")

## If site didn't collect PRISM3/PIM2, no need to display it
if(sum(!is.na(demog.site$prism3)) == 0){
  plot_vars <- setdiff(plot_vars, "prism3")
}

if(sum(!is.na(demog.site$pim2)) == 0){
  plot_vars <- setdiff(plot_vars, "pim2")
}

desc_plots <- map(plot_vars, plot_demog_var)
names(desc_plots) <- plot_vars

desc_plots_page1 <- c("age.f", "race.combined", "sex.f", "diagnosis.f")
desc_plots_page2 <- c("severity.combined", "prism3", "pim2")

soi_plots <- length(grep("prism3|pim2", plot_vars))

if(soi_plots == 2){
  desc_matrix_page2 <- matrix(c(1, 1, 2, 3), ncol = 2)
} else if(soi_plots == 1){
  desc_matrix_page2 <- matrix(c(1, 2), nrow = 2)
} else{
  desc_matrix_page2 <- matrix(1, ncol = 1)
}

## Function to find a variable name in names(desc_plots), returning only non-NAs
find_desc_plots <- function(name){
  tmp <- grep(name, names(desc_plots))
  if(length(tmp) > 0){
    return(tmp)
  } else{
    return(NA)
  }
}

these_plots_1 <- map_int(desc_plots_page1, find_desc_plots)
these_plots_1 <- these_plots_1[!is.na(these_plots_1)]

these_plots_2 <- map_int(desc_plots_page2, find_desc_plots)
these_plots_2 <- these_plots_2[!is.na(these_plots_2)]

@

\clearpage
<<vis_demog_1, results = 'asis', fig.height=10, fig.width = 7.5>>=
multiplot(plotlist = map(these_plots_1, ~ desc_plots[[.]]),
          layout = matrix(c(1, 1, 2, 2, 3, 4, 4, 4), ncol = 2))

@

\clearpage
<<vis_demog_2, results = 'asis', fig.height=6, fig.width = 7.5>>=
multiplot(plotlist = map(these_plots_2, ~ desc_plots[[.]]),
          layout = desc_matrix_page2)

@

\clearpage
\subsection{Adverse Events}

<<aetable, results = "asis">>=
latex(summaryM(as.formula(paste(paste(grep("^had", names(demog), value = TRUE),
                                      collapse = " + "),
                                "~ data.time")),
               data = demog.site),
      file = "",
      where = "!h",
      what = "%",
      npct = "both",
      title = "",
      caption = "Adverse Events",
      exclude1 = TRUE,
      long = FALSE)

@

\clearpage
\subsection{Comparison of Outcomes}
Table \ref{table:outcomes} describes and presents unadjusted tests of outcomes between the baseline and implementation time points.

Time on mechanical ventilation is described in three ways: the number of patients who \textbf{ever} had MV; the number of days on MV among those patients who ever received MV (i.e., non-zero values); and the number of days on MV among the entire cohort (i.e., including zero values).

<<outcomes>>=
desc.outcomes <- summaryM(fss.dc + popc.dc + ever.vent.test + ventdays.exp +
                            ventdays + piculos + hosplos + mortality.f ~
                            data.time,
                          data = demog.site,
                          test = FALSE)

## Outcomes only tested over entire cohort - multiple comparisons problem if
## we look at each site individually

@

<<printoutcomes, results = 'asis'>>=
my.print.summaryM(desc.outcomes,
                  caption = 'Study Outcomes',
                  caption.lot = 'Study Outcomes',
                  exclude1 = FALSE,
                  size = 'small',
                  label = 'table:outcomes')

@

<<vis_outcomes_1, results = 'asis', fig.height=6, fig.width = 7.5>>=
multiplot(desc_plots$fss, desc_plots$popc,
          layout = matrix(c(1, 2), ncol = 1))

@

<<vis_outcomes_2, results = 'asis', fig.height=3, fig.width = 7.5>>=
multiplot(desc_plots$ever.vent, desc_plots$ventdays,
          layout = matrix(c(1, 2), nrow = 1, byrow = TRUE))

@

<<vis_outcomes_3, results = 'asis', fig.height=3, fig.width = 7.5>>=
multiplot(desc_plots$piculos, desc_plots$hosplos, desc_plots$mortality.f,
          layout = matrix(1:3, nrow = 1, byrow = TRUE))

@

\begin{landscape}
\section{ABCDEF Bundle Performance}
The following table presents information on each element of the ABCDEF Bundle by month. (All three baseline months are described together; all months during the implementation period are described separately.)

Categorical variables are described as frequency (percent). Continuous variablesare described by their median (25th, 75th percentiles).

\emph{Italicized rows} describe the availability of recorded data on a specific characteristic. For example, we can only describe sedation on days which had any sedation data recorded.

<<performancetableinfo>>=
## -- Function to get sum of a variable for each month -------------------------
mapSum <- function(sumvar){
  map_int(all.months,
          function(x){
            sum(compliance.site[compliance.site$month.cat == x, sumvar],
                na.rm = TRUE)
          })
}

## -- How many days are entered for each month? --------------------------------
n.days <- map_int(all.months,
                  function(x){
                    sum(compliance.site$month.cat == x, na.rm = TRUE)
                  })

## -- A: Pain assessment, prevention and management ----------------------------
## How many days each month had pain assessment data recorded?
days.painassess.info <- mapSum('pain.assess.info')
pctdays.painassess.info <- round((days.painassess.info / n.days)*100)
npct.painassess.info <- npctString(days.painassess.info, n.days)

## What proportion of eligible assessments were done per day?
asmts.pain <- map_chr(
  all.months,
  function(x){
    get.mediqr(subset(compliance.site, month.cat == x)$pain.prop.assessed)
  }
)

## How many days each month had pain *re*assessment data recorded?
days.pain2hrs.info <- mapSum('pain.2hrs.info')
pctdays.pain2hrs.info <- round((days.pain2hrs.info / n.days)*100)
npct.pain2hrs.info <- npctString(days.pain2hrs.info, n.days)

## How many days each month had pain score < 5 when reassessed?
mapSum_chr <- function(sumvar, value){
  map_int(all.months,
          function(x){
            sum(compliance.site[compliance.site$month.cat == x, sumvar] == value,
                na.rm = TRUE)
          })
}

## Want to know how many days had a reassessment <5, >=5 *and* never reassessed
days.pain2hrs.underthreshold <- mapSum_chr('pain.2hrs.threshold', "<5")
pctdays.pain2hrs.underthreshold <-
  round((days.pain2hrs.underthreshold / days.pain2hrs.info)*100)
npct.pain2hrs.underthreshold <- npctString(days.pain2hrs.underthreshold,
                                           days.pain2hrs.info)

days.pain2hrs.overthreshold <- mapSum_chr('pain.2hrs.threshold', ">=5")
pctdays.pain2hrs.overthreshold <-
  round((days.pain2hrs.overthreshold / days.pain2hrs.info)*100)
npct.pain2hrs.overthreshold <- npctString(days.pain2hrs.overthreshold,
                                           days.pain2hrs.info)

days.pain2hrs.notassessed <- mapSum_chr('pain.2hrs.threshold', "Not reassessed")
pctdays.pain2hrs.notassessed <-
  round((days.pain2hrs.notassessed / days.pain2hrs.info)*100)
npct.pain2hrs.notassessed <- npctString(days.pain2hrs.notassessed,
                                        days.pain2hrs.info)

## How many days each month had pain threshold data recorded?
days.painthreshold.info <- mapSum('pain.threshold.info')
pctdays.painthreshold.info <- round((days.painthreshold.info / n.days)*100)
npct.painthreshold.info <- npctString(days.painthreshold.info, n.days)

## How many days each month had at least one pain score >= 5?
days.pain.threshold <- mapSum('pain.threshold')
pctdays.pain.threshold <-
  round((days.pain.threshold / days.painthreshold.info)*100)
npct.pain.threshold <- npctString(days.pain.threshold, days.painthreshold.info)

## How many pain assessments per day had at least one pain score >= 5?
asmts.pain.threshold <- map_chr(
  all.months,
  function(x){
    get.mediqr(subset(compliance.site, month.cat == x)$pain.morethan5)
  }
)

## -- B: Both SAT and SBT ------------------------------------------------------
## Sedation
## Days sedation data available
days.sed.info <- mapSum('sedation.info')
pctdays.sed.info <- round((days.sed.info / n.days)*100)
npct.sed.info <- npctString(days.sed.info, n.days)

## Days patient received continuous or intermittent sedation
days.rcvd.majorsed <- mapSum('on.majorsed')
pctdays.rcvd.majorsed <- round((days.rcvd.majorsed / days.sed.info)*100)
npct.rcvd.majorsed <- npctString(days.rcvd.majorsed, days.sed.info)

## Of days on continuous/intermittent sedation, how many had data on sedation interruption?
days.sat.info <- mapSum('sat.info')
pctdays.sat.info <- round((days.sat.info / days.rcvd.majorsed)*100)
npct.sat.info <- npctString(days.sat.info, days.rcvd.majorsed)

## Of days on continuous/intermittent sedation, how many did patient have sedation interrupted?
days.had.sat <- mapSum('had.sat')
pctdays.had.sat <- round((days.had.sat / days.sat.info)*100)
npct.had.sat <- npctString(days.had.sat, days.sat.info)

## Of days on continuous/intermittent sedation, how many had data on sedation weaning?
days.weaning.info <- mapSum('weaning.info')
pctdays.weaning.info <- round((days.weaning.info / days.rcvd.majorsed)*100)
npct.weaning.info <- npctString(days.weaning.info, days.rcvd.majorsed)

## Of days on continuous/intermittent sedation, how many did patient have sedation weaned?
days.had.weaning <- mapSum('had.weaning')
pctdays.had.weaning <- round((days.had.weaning / days.weaning.info)*100)
npct.had.weaning <- npctString(days.had.weaning, days.weaning.info)

## Days patient had any sedation (continuous, intermittent or PRN)
days.rcvd.anysed <- mapSum('on.anysed')
pctdays.rcvd.anysed <- round((days.rcvd.anysed / days.sed.info)*100)
npct.rcvd.anysed <- npctString(days.rcvd.anysed, days.sed.info)

## Of days with any sedation, how many had info on deep sedation
days.deepsed.info <- mapSum('deepsed.info')
pctdays.deepsed.info <- round((days.deepsed.info / days.rcvd.anysed)*100)
npct.deepsed.info <- npctString(days.deepsed.info, days.rcvd.anysed)

## Of days with any sedation with information, how many had deep sedation
days.deepsed <- mapSum('deeply.sedated')
pctdays.deepsed <- round((days.deepsed / days.deepsed.info)*100)
npct.deepsed <- npctString(days.deepsed, days.deepsed.info)

## Breathing
## How many days was MV data available?
days.mv.info <- mapSum('mv.info')
pctdays.mv.info <- round((days.mv.info / n.days)*100)
npct.mv.info <- npctString(days.mv.info, n.days)

## How many days was patient on MV?
days.mv <- mapSum('on.mv')
pctdays.mv <- round((days.mv / days.mv.info)*100)
npct.mv <- npctString(days.mv, days.mv.info)

## How many days on MV had info on SBT safety screen?
days.sbtsafety.info <- mapSum('sbt.safety.info')
pctdays.sbtsafety.info <- round((days.sbtsafety.info / days.mv)*100)
npct.sbtsafety.info <- npctString(days.sbtsafety.info, days.mv)

## How many days on MV had SBT safety screen?
days.sbtsafety <- mapSum('had.sbt.safety')
pctdays.sbtsafety <- round((days.sbtsafety / days.mv)*100)
npct.sbtsafety <- npctString(days.sbtsafety, days.mv)

## How many days on MV had SBT info?
days.sbt.info <- mapSum('sbt.info')
pctdays.sbt.info <- round((days.sbt.info / days.mv)*100)
npct.sbt.info <- npctString(days.sbt.info, days.mv)

## How many days with info had SBT?
days.sbt <- mapSum('had.sbt')
pctdays.sbt <- round((days.sbt / days.sbt.info)*100)
npct.sbt <- npctString(days.sbt, days.sbt.info)

## How many days on MV + safety screen data had SBT protocol followed?
days.sbt.protocol <- mapSum('sbt.protocol')
pctdays.sbt.protocol <- round((days.sbt.protocol / days.mv)*100)
npct.sbt.protocol <- npctString(days.sbt.protocol, days.mv)

## -- C: Choice of analgesia and sedation --------------------------------------
## How many days had anxiolysis section filled out?
days.anxio.info <- mapSum('anxiolysis.info')
pctdays.anxio.info <- round((days.anxio.info / n.days)*100)
npct.anxio.info <- npctString(days.anxio.info, n.days)

## How many days had anxiolytic specified (midaz, loraz, diaz, clonaz, ketamine, diphenhydramine)
days.anxio.spec <- mapSum('anxiolysis.specifics')
pctdays.anxio.spec <- round((days.anxio.spec / days.anxio.info)*100)
npct.anxio.spec <- npctString(days.anxio.spec, days.anxio.info)

## How many days had each class/type of anxiolytic?
days.benz <- mapSum('anxio.benz')
pctdays.benz <- round((days.benz / days.anxio.info)*100)
npct.benz <- npctString(days.benz, days.anxio.info)

days.ketam <- mapSum('anxio.ketam')
pctdays.ketam <- round((days.ketam / days.anxio.info)*100)
npct.ketam <- npctString(days.ketam, days.anxio.info)

days.diphen <- mapSum('anxio.diphen')
pctdays.diphen <- round((days.diphen / days.anxio.info)*100)
npct.diphen <- npctString(days.diphen, days.anxio.info)

## -- D: Delirium - assess, prevent and manage ---------------------------------
days.del.assessed <- mapSum('delirium.assessed')
pctdays.del.assessed <- round((days.del.assessed / n.days)*100)
npct.del.assessed <- npctString(days.del.assessed, n.days)

days.del.present <- mapSum('delirium.present')
pctdays.del.present <- round((days.del.present / days.del.assessed)*100)
npct.del.present <- npctString(days.del.present, days.del.assessed)

## How many delirium assessments per day?
asmts.del <- map_chr(
  all.months,
  function(x){
    get.mediqr(subset(compliance.site, month.cat == x)$delirium.assessments)
  })

## -- E: Exercise/early mobility -----------------------------------------------
## How many days had mobility safety screen?
days.exersafety.info <- mapSum('exer.safety.info')
pctdays.exersafety.info <- round((days.exersafety.info / n.days)*100)
npct.exersafety.info <- npctString(days.exersafety.info, n.days)

## How many days had mobility safety screen?
days.exersafety <- mapSum('had.exer.safety')
pctdays.exersafety <- round((days.exersafety / days.exersafety.info)*100)
npct.exersafety <- npctString(days.exersafety, days.exersafety.info)

## How many days had mobility therapy data?
days.exer.info <- mapSum('exer.info')
pctdays.exer.info <- round((days.exer.info / n.days)*100)
npct.exer.info <- npctString(days.exer.info, n.days)

## How many days had mobility therapy?
days.exer <- mapSum('had.exer')
pctdays.exer <- round((days.exer / days.exer.info)*100)
npct.exer <- npctString(days.exer, days.exer.info)

## How many days was both safety & mobility data entered?
days.exer.protocol.info <- mapSum('exer.protocol.info')
pctdays.exer.protocol.info <- round((days.exer.protocol.info / n.days)*100)
npct.exer.protocol.info <- npctString(days.exer.protocol.info, n.days)

## How many days had mobility protocol followed?
days.exer.protocol <- mapSum('exer.protocol')
pctdays.exer.protocol <- round((days.exer.protocol / days.exer.protocol.info)*100)
npct.exer.protocol <- npctString(days.exer.protocol, days.exer.protocol.info)

## -- F: Family engagement and empowerment -------------------------------------
## Information on family presence available?
days.familypres.info <- mapSum('family.present.info')
pctdays.familypres.info <- round((days.familypres.info / n.days)*100)
npct.familypres.info <- npctString(days.familypres.info, n.days)

## Was family present?
days.familypres <- mapSum('family.present')
pctdays.familypres <- round((days.familypres / days.familypres.info)*100)
npct.familypres <- npctString(days.familypres, days.familypres.info)

## If family present, was data available on whether they helped with nonpharm intervention?
days.familyinter.info <- mapSum('family.inter.info')
pctdays.familyinter.info <- round((days.familyinter.info / days.familypres)*100)
npct.familyinter.info <- npctString(days.familyinter.info, days.familypres)

## If family present & info available, did they help with nonpharm intervention
days.familyinter <- mapSum('family.intervention')
pctdays.familyinter <- round((days.familyinter / days.familyinter.info)*100)
npct.familyinter <- npctString(days.familyinter, days.familyinter.info)

@

<<createperformancetable>>=
## Function to italicize an entire row
italicize.this <- function(r){
  paste0('\\emph{', r, '}')
}

perf.table <- matrix(c(as.character(n.days),
                       ## A
                       italicize.this(npct.painassess.info),
                       asmts.pain,
                       italicize.this(npct.pain2hrs.info),
                       npct.pain2hrs.underthreshold,
                       npct.pain2hrs.overthreshold,
                       npct.pain2hrs.notassessed,
                       italicize.this(npct.painthreshold.info),
                       npct.pain.threshold,
                       asmts.pain.threshold,
                       ## B - sedation
                       italicize.this(npct.sed.info),
                       npct.rcvd.majorsed,
                       italicize.this(npct.sat.info),
                       npct.had.sat,
                       italicize.this(npct.weaning.info),
                       npct.had.weaning,
                       npct.rcvd.anysed,
                       italicize.this(npct.deepsed.info),
                       npct.deepsed,
                       ## B - breathing
                       italicize.this(npct.mv.info),
                       npct.mv,
                       italicize.this(npct.sbtsafety.info),
                       npct.sbtsafety,
                       italicize.this(npct.sbt.info),
                       npct.sbt,
                       npct.sbt.protocol,
                       ## C
                       italicize.this(npct.anxio.info),
                       npct.anxio.spec,
                       npct.benz,
                       npct.ketam,
                       npct.diphen,
                       ## D
                       npct.del.assessed,
                       asmts.del,
                       npct.del.present,
                       ## E
                       italicize.this(npct.exersafety.info),
                       npct.exersafety,
                       italicize.this(npct.exer.info),
                       npct.exer,
                       italicize.this(npct.exer.protocol.info),
                       npct.exer.protocol,
                       ## F
                       italicize.this(npct.familypres.info),
                       npct.familypres,
                       italicize.this(npct.familyinter.info),
                       npct.familyinter),
                     byrow = TRUE,
                     ncol = length(all.months))
rownames(perf.table) <- c('Days recorded',
                          '\\emph{Pain assessment data available}',
                          'Assessments done / opportunities',
                          '\\emph{Pain \\textbf{re}assessment data available}',
                          '2-hour reassessment < 5',
                          '2-hour reassessment >= 5',
                          'No 2-hour reassessment done',
                          '\\emph{Pain threshold data available}',
                          '>=1 assessment with pain >=5',
                          'Assessments with pain >=5',
                          '\\emph{Sedation data available}',
                          'On continuous/inter. sedation',
                          '~~~\\emph{Interruption data available}',
                          '~~~Sedation interrupted (SAT)',
                          '~~~\\emph{Weaning data available}',
                          '~~~Weaned via protocol',
                          'On any sedation (including PRN)',
                          '~~~\\emph{Deep sedation data available}',
                          '~~~On deep sedation*',
                          '\\emph{Invasive MV data available}',
                          'On invasive MV',
                          '~~~\\emph{SBT safety data available}',
                          '~~~SBT safety screen done',
                          '~~~\\emph{SBT data available}',
                          '~~~SBT done',
                          '~~~SBT protocol followed**',
                          '\\emph{Anxiolysis data available}',
                          'Received anxiolytics of interest',
                          '~~~Received benzodiazepines',
                          '~~~Received ketamine',
                          '~~~Received diphenhydramine',
                          'Delirium assessed',
                          '~~~Assessments per day',
                          '~~~Delirium present',
                          '\\emph{Safety screen data available}',
                          'Mobility safety screen done',
                          '\\emph{Performance data available}',
                          'Mobilization performed',
                          '\\emph{Protocol data available}',
                          'Mobility protocol followed**',
                          '\\emph{Family presence data available}',
                          'Family or caregiver present',
                          '\\emph{Family intervention data available}',
                          'Family participated in nonpharm inter.')
@

<<printperformancetable, results = 'asis'>>=
latex(perf.table, file = '',
      title = '',
      where = '!h',
      label = 'table:performance',
      size = 'footnotesize',
      colheads = all.months,
      col.just = rep('r', ncol(perf.table)),
      rgroup = c('',
                 'A: Assess, Prevent, Manage Pain',
                 'B: Both SAT/SBT: Sedation',
                 'B: SAT/SBT: ERT/Breathing',
                 'C: Choice of Sedation',
                 'D: Delirium***',
                 'E: Exercise/Early Mobility',
                 'F: Family Engagement'),
      n.rgroup = c(1, 9, 9, 7, 5, 3, 6, 4),
      insert.bottom = "* Deep sedation refers to SBS $\\le$ -2 or RASS $\\le$ -4; ** Protocol = safety screen performed and, if passed, SBT/mobilization performed; *** Delirium assessed if one or more of those assessment tools is available; delirium present if highest CAPD $\\ge$9 or present on psCAM, pCAM or CAM-ICU")

@

\clearpage
<<runcharts_datamgmt>>=
## -- Create data frame for all runcharts --------------------------------------
all.perfpct <- list(pctdays.pain2hrs.underthreshold, pctdays.had.sat,
                    pctdays.had.weaning, pctdays.sbt, pctdays.sbt.protocol,
                    pctdays.anxio.spec, pctdays.del.present, pctdays.exer,
                    pctdays.exer.protocol, pctdays.familyinter)

all.perfdays <- list(days.pain2hrs.underthreshold, days.had.sat,
                     days.had.weaning, days.sbt, days.sbt.protocol,
                     days.anxio.spec, days.del.present, days.exer,
                     days.exer.protocol, days.familyinter)

all.infodays <- list(days.pain2hrs.info, days.sat.info, days.weaning.info,
                     days.sbt.info, days.sbt.info, days.anxio.info,
                     days.del.assessed, days.exer.info, days.exer.protocol.info,
                     days.familypres.info)

denom.infodays <- list(n.days, days.rcvd.majorsed, days.rcvd.majorsed,
                       days.mv, days.mv, n.days, n.days,
                       n.days, n.days, n.days)

## List of chart titles
perf.chart.titles <- list(
  "A: Pain score < 5 when reassessed within 2h of highest level",
  "B: Sedation interrupted (SAT)",
  "B: Sedation weaned via protocol",
  "B: SBT performed",
  "B: SBT protocol performed (safety screen + SBT)",
  "C: Received benzodiazepines, ketamine and/or diphenhydramine",
  "D: Delirium present",
  "\nE: Mobilization performed",
  "E: Mobilization protocol performed\n(safety screen + mobility)",
  "F: Family participation"
)

perf.info.subtitles.1 <- list(
  "Pain reassessment, or lack thereof, was documented",
  "SAT was documented",
  "Weaning was documented",
  "SBT was documented",
  "SBT protocol documented",
  "Anxiolytic medications were documented",
  "Delirium was assessed",
  "Mobilization was documented",
  "Protocol was documented",
  "Family presence was documented"
)

perf.info.subtitles.2 <- list("in the ICU",
                              "\non continuous/intermittent sedation",
                              "\non continuous/intermittent sedation",
                              "\non mechanical ventilation",
                              "\non mechanical ventilation",
                              "in the ICU",
                              "in the ICU",
                              "\nin the ICU",
                              "\nin the ICU",
                              "in the ICU")

perf.yaxes <- list(
  "Pain Reassessment Score < 5\nout of Days Pain Reassessed within 2h of Highest Level",
  "Sedation Was Interrupted\nout of Days on Sedation with Documentation",
  "Sedation Weaned via Protocol\nout of Days on Sedation with Documentation",
  "SBT Performed\nout of Days on MV with Documentation",
  "SBT Protocol Performed\nout of Days on MV with Documentation",
  "Received One or More Anxiolytic\nout of Days with Documentation",
  "Delirium Present\nout of Days Delirium Assessed",
  "Mobilization Performed\nout of Days with Documentation",
  "Mobilization Protocol Performed\nout of Days with Documentation",
  "Family Participated in Intervention\nout of Days Family Documented Present"
  )

perf.chart.data <- map_df(1:length(all.perfdays),
                          ~ data.frame(chart.title = perf.chart.titles[[.]],
                                       month = 1:length(all.months),
                                       pct.perf = all.perfpct[[.]],
                                       days.perf = all.perfdays[[.]],
                                       days.info = all.infodays[[.]],
                                       days.elig = denom.infodays[[.]],
                                       sub1 = perf.info.subtitles.1[[.]],
                                       sub2 = perf.info.subtitles.2[[.]],
                                       yax = perf.yaxes[[.]])) %>%
  mutate(num.denom = ifelse(is.nan(pct.perf), '',
                     ifelse(substr(trimws(chart.title), 1, 1) %in% c('B', 'E'),
                            paste0(days.perf, ' /\n', days.info),
                            paste(days.perf, '/', days.info))),
         linegroup = 1)

## Function to create a runchart for a single element
perf.runchart <- function(ctitle){
  df <- perf.chart.data %>% filter(chart.title == ctitle)

  if(substr(trimws(ctitle), 1, 1) %in% c('B', 'E')){
    nd.size <- 2
  } else{
    nd.size <- 2.5
  }

  sub1 <- unique(df$sub1)
  sub2 <- unique(df$sub2)
  ytitle <- unique(df$yax)

  info.avail <- sum(df[,'days.info'], na.rm = TRUE)
  info.elig <- sum(df[,'days.elig'], na.rm = TRUE)
  info.pct <- round((info.avail / info.elig)*100)

  tmp <- ggplot(data = df, aes(x = month, y = pct.perf)) +
    annotate(geom = 'rect', xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = -0.5,
             fill = 'white', colour = NA) +
    geom_line(aes(group = linegroup), colour = "#003D79") +
    geom_point(colour = "#003D79") +
    geom_text(aes(label = num.denom),
              y = -5, size = nd.size, colour = "#003D79", fontface = 'bold') +
    scale_x_continuous(breaks = 1:length(all.months),
                       labels = all.months,
                       name = NULL) +
    scale_y_continuous(limits = c(-2, 100), breaks = seq(0, 100, 20),
                       name = sprintf("Percent of Days %s", ytitle)) +
    ggtitle(label = ctitle,
            subtitle = sprintf('%s on %s out of %s patient-days (%s%%) %s.',
                              sub1, info.avail, info.elig, info.pct, sub2)) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
          plot.title = element_text(face = 'bold'),
          plot.subtitle = element_text(face = 'italic', size = 10),
          panel.grid.minor.x = element_blank())

  tmp
}

perf.charts <- map(perf.chart.titles, perf.runchart)

@

<<perfcharta, results = 'asis', fig.height = 7, fig.width = 10, fig.align = 'center'>>=
perf.charts[[1]]
@

<<perfchartb_sat, results = 'asis', fig.height = 6, fig.width = 10, fig.align = 'center'>>=
multiplot(perf.charts[[2]], perf.charts[[3]], layout = matrix(1:2, nrow = 1))
@

<<perfchartb_sbt, results = 'asis', fig.height = 6, fig.width = 10, fig.align = 'center'>>=
multiplot(perf.charts[[4]], perf.charts[[5]], layout = matrix(1:2, nrow = 1))
@

<<perfchartc, results = 'asis', fig.height = 7, fig.width = 10, fig.align = 'center'>>=
perf.charts[[6]]
@

<<perfchartd, results = 'asis', fig.height = 7, fig.width = 10, fig.align = 'center'>>=
perf.charts[[7]]
@

<<perfcharte, results = 'asis', fig.height = 6, fig.width = 10, fig.align = 'center'>>=
multiplot(perf.charts[[8]], perf.charts[[9]], layout = matrix(1:2, nrow = 1))
@

<<perfchartf, results = 'asis', fig.height = 7, fig.width = 10, fig.align = 'center'>>=
perf.charts[[10]]
@

\clearpage
\section{Medication Use}

<<med_sentences>>=
med_yn_statement <- "\\textbf{If values are missing in the database, we assume this indicates that no drug was given.}"

med_doses_statement <- "\\textbf{If no dose is entered in the database, we assume this indicates that no drug was given, and that day/drug is assigned a dose of 0.}"

include_med_yn <- include_med_doses <- TRUE

if(site == "Le Bonheur Childrens Hospital"){
  med_yn_statement <- med_doses_statement <- "No medication data was collected at this site; therefore no tables or runcharts are provided."
  include_med_yn <- include_med_doses <- FALSE
} else if(site %in% c("Mayo Eugenio Litta Childrens Hospital",
                      "Monroe Carell Jr. Childrens Hospital at Vanderbilt",
                      "Weill Cornell Pediatrics")){
  med_doses_statement <- "Only exposure (yes/no) to medications was collected at this site; therefore no dosing information is provided."
  include_med_doses <- FALSE
}

@

<<createmedstable>>=
if(include_med_yn){
  label(compliance.site$benzo.rcvd) <- 'Received benzodiazepines'
  label(compliance.site$opioid.rcvd) <- 'Received opioids'
  label(compliance.site$benzo.total) <- 'Total (lorazepam equiv.)'
  label(compliance.site$opioid.total) <- 'Total (morphine equiv.)'
  label(compliance.site$benzo.total.eo) <-
    'Total (lorazepam equiv.)\\\\~~~~~~among exposed'
  label(compliance.site$opioid.total.eo) <-
    'Total (morphine equiv.)\\\\~~~~~~among exposed'

  meds.table.yn <- summaryM(benzo.rcvd + loraz.rcvd + midaz.rcvd + opioid.rcvd +
                              morph.rcvd + hydromorph.rcvd +
                              fent.rcvd ~ month.cat,
                            data = subset(compliance.site, drugs_yn))

  if(include_med_doses){
    meds.table.doses.b6 <-
      summaryM(benzo.total + benzo.total.eo + loraz.scaled.eo +
                 midaz.scaled.eo + opioid.total + opioid.total.eo +
                 morph.scaled.eo + hydromorph.scaled.eo +
                 fent.scaled.eo ~ month.cat,
               continuous = 5,
               data = subset(compliance.site,
                             drugs_amt &
                               month.cat %in% c("Baseline",
                                                paste("Imp.", 1:6))))

    meds.table.doses.b12 <-
      summaryM(benzo.total + benzo.total.eo + loraz.scaled.eo +
                 midaz.scaled.eo + opioid.total + opioid.total.eo +
                 morph.scaled.eo + hydromorph.scaled.eo +
                 fent.scaled.eo ~ month.cat,
               continuous = 5,
               data = subset(compliance.site,
                             drugs_amt &
                               month.cat %in% c("Baseline",
                                                paste("Imp.", 7:12))))
  }
}

@

\subsection{Medications Received (Yes/No)}
\Sexpr{med_yn_statement}

If included, a value of FALSE indicates that none of a particular medication was given during any month.

<<printmedtables, results = 'asis'>>=
if(include_med_yn){
  latex(meds.table.yn, file = '',
        title = '',
        caption = 'Daily Medication Use, Yes vs. No. \\textbf{We assume missing data indicates no drug was given}',
        prn = FALSE,
        prN = FALSE,
        what = '%',
        long = TRUE,
        where = '!h',
        # rgroup = c("Benzodiazepines", "Opioids"),
        # n.rgroup = c(3, 4),
        label = 'table:medsyn',
        size = 'scriptsize')
}

@

\clearpage
\subsection{Medication Doses}

Notes:
\begin{itemize}
\item Total benzodiazepines are converted to lorazepam equivalents:
\emph{lorazepam = [midazolam / 0.5]}
\item Total opioids are converted to morphine equivalents:
\emph{morphine = hydromorphone / 4 = fentanyl / 10}
\item All doses are scaled by weight in kilograms prior to conversion.
\end{itemize}

\Sexpr{med_doses_statement}

<<printmeddoses, results = "asis">>=
if(include_med_doses){
  latex(meds.table.doses.b6, file = '',
        title = '',
        caption = 'Daily Medication Use, Baseline - Implementation Month 6. Doses are summarized by {\\scriptsize 25th} 50th {\\scriptsize 75th} percentiles. \\textbf{If no dose is entered in the database, that dose is assumed to be 0}',
        digits = 2,
        prmsd = FALSE,
        prn = FALSE,
        prN = FALSE,
        what = '%',
        long = TRUE,
        where = '!h',
        rgroup = c("Benzodiazepines", "Opioids"),
        n.rgroup = c(4, 5),
        label = 'table:meddoses1',
        size = 'scriptsize')

  latex(meds.table.doses.b12, file = '',
        title = '',
        caption = 'Daily Medication Use, Baseline + Implementation Months 7-8. Doses are summarized by {\\scriptsize 25th} 50th {\\scriptsize 75th} percentiles. \\textbf{If no dose is entered in the database, that dose is assumed to be 0}',
        digits = 2,
        prmsd = FALSE,
        prn = FALSE,
        prN = FALSE,
        what = '%',
        long = TRUE,
        where = '!h',
        rgroup = c("Benzodiazepines", "Opioids"),
        n.rgroup = c(4, 5),
        label = 'table:meddoses2',
        size = 'scriptsize')
}

@

<<vis_meds>>=
if(include_med_yn){
  ## -- Runcharts for proportion of patient-days with Drug X over time ---------
  med_names <- grep("\\.rcvd", names(compliance), value = TRUE)
  med_titles <- c("Midazolam", "Lorazepam", "Benzodiazepines", "Fentanyl",
                  "Morphine", "Hydromorphone", "Opioids")
  med_subtitles <- c(
    NA, NA, "Lorazepam and/or midazolam", NA, NA, NA,
    "Fentanyl, morphine and/or hydromorphone"
  )

  ## How many days were eligible each month?
  med_elig_yn <- compliance.site %>%
    filter(drugs_yn & !is.na(month.cat)) %>%
    group_by(month.cat) %>%
    summarise(n_days = n())

  med_rcvd_df <- compliance.site %>%
    filter(drugs_yn & !is.na(month.cat)) %>%
    dplyr::select(month.cat, one_of(med_names)) %>%
    group_by(month.cat) %>%
    summarise_all(.funs = c("mean", "sum")) %>%
    gather(key = drug.fun, value = val, -month.cat) %>%
    separate(drug.fun, into = c("drug", "quantity"), sep = "_") %>%
    spread(key = quantity, value = val) %>%
    left_join(med_elig_yn, by = "month.cat") %>%
    mutate(num.denom = paste0(sum, "/", n_days),
           linegroup = 1)

  ## Function to create a runchart for a single medication
  med.runchart <- function(med, med_title, med_subtitle){

    df <- med_rcvd_df %>%
      filter(drug == med)

    if(med %in% c("benzo.rcvd", "opioid.rcvd")){
      nd.size <- 2.5
      ysize <- 10
      axtext.size <- 9
    } else{
      nd.size <- 2
      ysize <- 8
      axtext.size <- 6
    }

    tmp <- ggplot(data = df, aes(x = month.cat, y = mean)) +
      annotate(geom = 'rect', xmin = -Inf, xmax = Inf, ymax = Inf, ymin = 0.96,
               fill = 'white', colour = NA) +
      geom_line(aes(group = linegroup), colour = "#003D79") +
      geom_point(colour = "#003D79") +
      geom_text(aes(label = num.denom), y = 1,
                size = nd.size, colour = "#003D79", fontface = 'bold') +
      scale_x_discrete(name = NULL) +
      scale_y_continuous(
        limits = c(0, 1),
        breaks = seq(0, 1, 0.2),
        labels = paste0(seq(0, 1, 0.2) * 100, "%"),
        name = sprintf("Percent of Days\nReceived %s", med_title)
      ) +
      theme_minimal() +
      theme(axis.text.x =
              element_text(angle = 45, hjust = 1, vjust = 1,
                           size = axtext.size),
            axis.text.y = element_text(size = axtext.size),
            axis.title = element_text(size = ysize),
            plot.title = element_text(face = 'bold'),
            plot.subtitle = element_text(face = 'italic', size = 10),
            panel.grid.minor.x = element_blank())

    if(!is.na(med_subtitle)){
      tmp <- tmp +
        ggtitle(label = med_title, subtitle = med_subtitle)
    } else{
      tmp <- tmp +
        ggtitle(label = med_title)
    }

    tmp
  }

  med_rcvd_plots <- pmap(list("med" = med_names,
                              "med_title" = med_titles,
                              "med_subtitle" = med_subtitles),
                         .f = med.runchart)
  names(med_rcvd_plots) <- med_names
}

## -- Boxplots for amount of drug among exposed over time ----------------------
if(include_med_doses){
  med_amt_names <- grep(".+\\.eo$", names(compliance), value = TRUE)

  med_amt_df <- compliance.site %>%
    filter(drugs_yn & !is.na(month.cat)) %>%
    dplyr::select(month.cat, one_of(med_amt_names)) %>%
    gather(key = drug, value = amt, -month.cat) %>%
    filter(!is.na(amt)) %>%
    mutate(is_baseline = month.cat == "Baseline")

  ## Function to create a runchart for a single medication
  med.boxplot <- function(med, med_title, med_subtitle){

    plot_cols <- c("TRUE" = as.character(peds.colors["D"]),
                   "FALSE" = as.character(peds.colors["A"]))

    df <- med_amt_df %>%
      filter(drug == med)

    if(med %in% c("benzo.total.eo", "opioid.total.eo")){
      nd.size <- 3
    } else{
      nd.size <- 2
    }

    tmp <- ggplot(data = df, aes(x = month.cat, y = amt)) +
      geom_boxplot(aes(fill = is_baseline, colour = is_baseline), alpha = 0.6) +
      scale_x_discrete(name = NULL) +
      scale_y_continuous(
        name = sprintf("Amount of %s Per 24 Hours Among Those Who Received It",
                       med_title)
      ) +
      scale_fill_manual(values = plot_cols) +
      scale_colour_manual(values = plot_cols) +
      theme_minimal() +
      theme(legend.position = "none",
            axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
            plot.title = element_text(face = 'bold'),
            plot.subtitle = element_text(face = 'italic', size = 10),
            panel.grid.minor.x = element_blank())

    if(!is.na(med_subtitle)){
      tmp <- tmp +
        ggtitle(label = med_title, subtitle = med_subtitle)
    } else{
      tmp <- tmp +
        ggtitle(label = med_title)
    }

    tmp
  }

  med_amt_plots <- pmap(list("med" = med_amt_names,
                             "med_title" = med_titles,
                             "med_subtitle" = med_subtitles),
                        .f = med.boxplot)
}

@

\clearpage
<<print_benzo_runcharts, results = "asis", fig.width = 10, fig.height = 7.5, fig.align = "center">>=
if(include_med_yn){
  benzo_rcvd_plotorder <- c( "benzo.rcvd", "loraz.rcvd", "midaz.rcvd")

  multiplot(plotlist = map(benzo_rcvd_plotorder, ~ med_rcvd_plots[[.]]),
            layout = matrix(c(1, 1, 2, 3), ncol = 2))
}

@

\clearpage
<<print_opioid_runcharts, results = "asis", fig.width = 10, fig.height = 7.5, fig.align = "center">>=
if(include_med_yn){
  opioid_rcvd_plotorder <-
    c("opioid.rcvd", "morph.rcvd", "hydromorph.rcvd", "fent.rcvd")

  multiplot(plotlist = map(opioid_rcvd_plotorder, ~ med_rcvd_plots[[.]]),
            layout = matrix(c(1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4), ncol = 2))
}

@

\end{landscape}
\end{document}
